@using Newtonsoft.Json;
@using HabitAqui.Models
@model IEnumerable<HabitAqui.Models.Categoria>
@{
    ViewData["Title"] = "Home Page";
}

@if (User.IsInRole("Funcionario") || User.IsInRole("Gestor"))
{
    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-4 custom-chart-container">
                <h3>Habitações por categoria</h3>
                <canvas id="habitacoesByCategoriaChart" class="custom-chart"></canvas>
            </div>
            <div class="col-4 custom-chart-container">
                <h3>Arrendamentos por estado</h3>
                <canvas id="arrendamentosByEstadoChart" class="custom-chart"></canvas>
            </div>
            <div class="col-4 custom-chart-container">
                <h3>Arrendamentos por mês</h3>
                <canvas id="radarChart" class="custom-chart"></canvas>
            </div>
        </div>
    </div>

}else{
<div class="d-flex justify-content-center align-items-center vh-100 bg-image" style="background-image:url('https://img.freepik.com/premium-photo/empty-minimal-room-interior-design-with-fishbone-flooring_327072-21366.jpg?size=626&ext=jpg&ga=GA1.1.386372595.1697760000&semt=ais'); background-size:cover; height:100vh;">
    <div class="d-flex justify-content-center align-items-center v-100">
        <form asp-area="" asp-controller="Home" asp-action="Search" method="post">
            <div class="row g-0">
                <div class="col-5 opacity-90">
                    <select name="category" class="form-select form-select-lg">
                        <option selected value="">Tipo de Imóvel</option>
                        @if (Model.Any())
                        {
                            @foreach (var categoria in Model)
                            {
                                <option value="@categoria.Nome">@categoria.Nome</option>
                            }

                        }
                    </select>
                </div>
                <div class="col-5">
                    <input type="search" name="local" class="form-control form-control-lg opacity-90" placeholder="Pesquisa por local" />
                </div>
                <div class="col-2">
                    <button type="submit" class="btn btn-dark btn-lg btn-block">
                        Procurar
                    </button>
                </div>
            </div>
            <div class="row g-3 my-3">
                <div class="col">
                    <input class="form-control form-control-lg opacity-90" type="date" name="start_date" placeholder="Data de Início">
                </div>
                <div class="col">
                    <input class="form-control form-control-lg opacity-90" type="date" name="end_date" placeholder="Data de Fim">
                </div>
                <div class="col">
                    <input class="form-control form-control-lg opacity-90" type="number" placeholder="Período mínimo" name="periodo">
                </div>
            </div>
        </form>

    </div>
</div>
}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    function getEstadoString(valor) {
        switch (valor) {
            case 0: return 'CONFIRMADO';
            case 1: return 'REJEITADO';
            case 2: return 'RECEBIDO';
            case 3: return 'ENTREGUE';
            case 4: return 'NAO_CONFIRMADO';
            default: return '';
        }
    }
    var estadosData = @Html.Raw(JsonConvert.SerializeObject(ViewBag.EstadosCount));
    var estadosLabels = estadosData.map(item => getEstadoString(item.Estado));
    var estadosValues = estadosData.map(item => item.Count);

    var ctx = document.getElementById('arrendamentosByEstadoChart').getContext('2d');
    var myChart = new Chart(ctx, {
        type: 'doughnut',
        height: 260,
        data: {
            labels: estadosLabels,
            datasets: [{
                data: estadosValues,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.7)',
                    'rgba(54, 162, 235, 0.7)',
                    'rgba(255, 206, 86, 0.7)',
                    'rgba(75, 192, 192, 0.7)',
                    'rgba(153, 102, 255, 0.7)',
                    'rgba(255, 159, 64, 0.7)',
                ],
            }],
        },
        options: {
            responsive: true
        }
    });
    var categoriasData = @Html.Raw(JsonConvert.SerializeObject(ViewBag.CategoriasWithCount));

    var categoriasLabels = categoriasData.map(item => item.Categoria);
    var categoriasValues = categoriasData.map(item => item.Count);

    var ctxCategoria = document.getElementById('habitacoesByCategoriaChart').getContext('2d');
    var myCategoriaChart = new Chart(ctxCategoria, {
        type: 'bar',
        data: {
            labels: categoriasLabels,
            datasets: [{
                label: 'Número de Habitacoes',
                data: categoriasValues,
                backgroundColor: 'rgba(75, 192, 192, 0.7)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                x: { // Configure the x-axis
                    beginAtZero: true
                },
                y: { // Configure the y-axis
                    beginAtZero: true,
                    steps: 10,
                    stepValue: 1
                }
            }
        }
    });
   
    var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

    var monthlyArrendamentosData = @Html.Raw(JsonConvert.SerializeObject(ViewBag.MonthlyArrendamentos));

    var monthlyArrendamentosValues = Array.from({ length: 12 }, (_, i) => {
        const monthData = monthlyArrendamentosData.find(d => d.Month === i + 1);
        return monthData ? monthData.Count : 0;
    });

    var ctx = document.getElementById('radarChart').getContext('2d');
    var myRadarChart = new Chart(ctx, {
        type: 'radar',
        data: {
            labels: months,
            datasets: [{
                label: 'Monthly Arrendamentos',
                data: monthlyArrendamentosValues,
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderColor: 'rgba(255, 99, 132, 1)', 
                borderWidth: 2
            }]
        },
        options: {
            scale: {
                ticks: {
                    beginAtZero: true,
                    max: Math.max(...monthlyArrendamentosValues) + 1
                }
            }
        }
    });
</script>
